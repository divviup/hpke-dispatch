searchState.loadedDescShard("p256", 0, "RustCrypto: NIST P-256 (secp256r1) elliptic curve\nElliptic curve point in affine coordinates.\nBlinded scalar.\nCompressed SEC1-encoded NIST P-256 curve point.\nNIST P-256 SEC1 encoded point.\nNIST P-256 field element serialized as bytes.\nNIST P-256 elliptic curve.\nNon-zero NIST P-256 scalar field element.\nMultiplicative identity.\nElliptic curve point in projective coordinates.\nNIST P-256 public key.\nScalars are elements in the finite field modulo n.\nNIST P-256 secret key.\n256-bit unsigned big integer.\nZero scalar.\nReturns self + rhs mod n\nReturns 2*self.\nElliptic Curve Diffie-Hellman (Ephemeral) Support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given byte array as an SEC1-encoded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of self, if self is …\nFast variable-time inversion using Stein’s algorithm.\nIs integer representing equivalence class even?\nIs integer representing equivalence class odd?\nReturns self * rhs mod n\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nReturns self * self mod p\nReturns self - rhs mod n.\nReturns the SEC1 encoding of this scalar.\nNIST P-256 Ephemeral Diffie-Hellman Secret.\nShared secret value computed via ECDH key agreement.\nLow-level Elliptic Curve Diffie-Hellman (ECDH) function.")